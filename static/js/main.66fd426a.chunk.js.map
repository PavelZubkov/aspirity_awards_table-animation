{"version":3,"sources":["motion/motion.ts","table/table.tsx","app/app.tsx","report-web-vitals.ts","index.tsx"],"names":["Motion","props","handleRender","as","children","other","ref","useRef","prevRect","useLayoutEffect","currentRect","current","getBoundingClientRect","React","createElement","sortAnimation","prev","getAnimations","some","animation","playState","diff","bottom","style","zIndex","String","Math","ceil","window","innerHeight","top","animate","transform","duration","abs","easing","TableRow","Table","table","renderedTable","getTableProps","className","headerGroups","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","getSortByToggleProps","render","isSorted","isSortedDesc","getTableBodyProps","rows","row","prepareRow","getRowProps","cells","cell","getCellProps","createData","Array","fill","_","index","year","months","random","ytd","reduce","sum","month","createColumns","columns","Header","accessor","forEach","date","Date","setMonth","push","toLocaleDateString","Cell","value","toFixed","App","data","useMemo","useTable","initialState","sortBy","id","useSortBy","onPerfEntry","ReactDOM","StrictMode","document","getElementById","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB"],"mappings":"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","file":"static/js/main.66fd426a.chunk.js","sourcesContent":["import React, { useLayoutEffect, useRef } from 'react';\n\ninterface IMotion {\n  as: string,\n  children: React.ReactNode[]\n  handleRender: (ref: React.MutableRefObject<HTMLElement>, current: DOMRect, prev?: DOMRect) => void,\n}\n\nexport function Motion(props: IMotion) {\n  const { handleRender, as, children, ...other } = props\n  \n  const ref = useRef<HTMLElement>() as React.MutableRefObject<HTMLElement>\n  const prevRect = useRef<DOMRect>()\n\n  useLayoutEffect(() => {\n    const currentRect = ref.current!.getBoundingClientRect()\n    handleRender(ref, currentRect, prevRect.current)\n    prevRect.current = currentRect\n  })\n\n  return React.createElement(as, { ...other, ref }, children)\n}","import React from 'react';\nimport { TableInstance } from 'react-table'\nimport { Motion } from '../motion/motion'\nimport './table.css'\n\nfunction sortAnimation(\n  ref: React.MutableRefObject<HTMLElement>,\n  current: DOMRect,\n  prev?: DOMRect,\n) {\n  if (!prev) return\n\n  const animations = ref.current.getAnimations()\n  if (animations.some(animation => animation.playState === 'running')) {\n    return\n  }\n\n  const diff = prev.bottom - current.bottom \n  if (diff === 0) return\n    \n  ref.current.style.zIndex = String(Math.ceil(window.innerHeight - current.top))\n  ref.current.animate([\n    {\n      transform: `translate(0, ${diff}px)`,\n    },\n    { \n      transform: 'translateX(0) translate(0, 0)',\n    },\n  ], {\n      duration: Math.abs(1.8 * diff),\n      easing: 'ease-out',\n  })\n}\n\nfunction TableRow(props: { [name:string]: any }) {\n  return (\n    <Motion\n      {...props}\n      as=\"tr\"\n      handleRender={sortAnimation}\n    >{props.children}\n    </Motion>\n  )\n}\n\ninterface ITable<Row extends object> {\n  table: TableInstance<Row>\n}\n\nexport function Table<Row extends object>({ table }: ITable<Row>) {\n  const renderedTable = (\n    <table {...table.getTableProps()} className=\"table\">\n      <thead className=\"table_head\">\n        {table.headerGroups.map(headerGroup => (\n          <tr {...headerGroup.getHeaderGroupProps()} className=\"table_row_head\">\n            {headerGroup.headers.map(column => (\n              <th {...column.getHeaderProps(column.getSortByToggleProps())} className=\"table_cell_head\">\n                {column.render('Header')}\n                <span>\n                  {column.isSorted ? (column.isSortedDesc ? ' ðŸ”½' : ' ðŸ”¼') : ''}\n                </span>\n              </th>\n            ))}\n          </tr>\n        ))}\n      </thead>\n      <tbody {...table.getTableBodyProps()} className=\"table_body\">\n        {table.rows.map(row => {\n          table.prepareRow(row)\n          return (\n            <TableRow {...row.getRowProps()} className=\"table_row\">\n              {row.cells.map(cell => (\n                <td {...cell.getCellProps()} className=\"table_cell\">\n                  {cell.render('Cell')}\n                </td>\n              ))}\n            </TableRow>\n          )\n        })}\n      </tbody>\n    </table>\n  )\n  \n  return (\n    <div className=\"table_outline\">\n      {renderedTable}\n    </div>\n  )\n}\n\nexport default Table;\n","import React, { useMemo } from 'react';\nimport { useTable, useSortBy, Column } from 'react-table'\nimport { Table } from '../table/table'\nimport './app.css';\n\ninterface Row {\n  year: number,\n  months: number[],\n  ytd: number,\n}\n\nfunction createData(): Row[] {\n  return new Array(12).fill(0).map((_, index) => {\n    const year = 2010 + index\n    const months = new Array(12).fill(0).map(() => Math.random() * 10)\n    const ytd = months.reduce((sum, month) => sum + month, 0)\n    return { year, months, ytd }\n  }) \n}\n\nfunction createColumns(): Column<Row>[] {\n  const columns: Column<Row>[] = [{\n    Header: 'Year',\n    accessor: 'year',\n  }]\n  new Array(12).fill(0).forEach((_, month) => {\n    const date = new Date()\n    date.setMonth(month)\n    \n    columns.push({\n      Header: date.toLocaleDateString('en-US', { month: 'short' }),\n      accessor: `months[${month}]` as 'months',\n      Cell: (props: { value: number }) => props.value.toFixed(2) + ' %'\n    })\n  })\n  columns.push({\n    Header: 'YTD',\n    accessor: 'ytd',\n    Cell: (props: { value: number }) => props.value.toFixed(2) + ' %',\n  })\n\n  return columns\n}\n\nexport function App() {\n  const data = useMemo(createData, [])\n  const columns = React.useMemo(createColumns, [])\n  const table = useTable({\n    data,\n    columns,\n    initialState: { sortBy: [{ id: 'year' }] },\n  }, useSortBy)\n\n  return (\n    <div className=\"page\">\n      <h1 className=\"page_header\">Monthly return</h1>\n      <Table table={table} />\n    </div>\n  )\n}","import { ReportHandler } from 'web-vitals';\n\nexport const reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './app/app';\nimport { reportWebVitals } from './report-web-vitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}