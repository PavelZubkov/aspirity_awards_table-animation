{"version":3,"sources":["motion/motion.ts","table/table.tsx","app/app.tsx","report-web-vitals.ts","index.tsx"],"names":["Motion","props","as","children","other","ref","useRef","prevRect","useLayoutEffect","current","nextRect","getBoundingClientRect","diff","bottom","animate","transform","duration","Math","abs","easing","React","createElement","Table","data","columns","table","useTable","initialState","sortBy","id","useSortBy","getTableProps","className","headerGroups","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","getSortByToggleProps","render","isSorted","isSortedDesc","getTableBodyProps","rows","row","prepareRow","getRowProps","cells","cell","getCellProps","createData","Array","fill","_","index","year","months","random","ytd","reduce","sum","month","createColumns","Header","accessor","forEach","date","Date","setMonth","push","toLocaleDateString","Cell","value","toFixed","App","useMemo","onPerfEntry","ReactDOM","StrictMode","document","getElementById","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB"],"mappings":"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","file":"static/js/main.07258ca9.chunk.js","sourcesContent":["import React, { useLayoutEffect, useRef } from 'react';\n\nexport function Motion(props: { as: string, children: React.ReactNode[], className: string }) {\n  const { as, children, ...other } = props\n  \n  const ref = useRef<HTMLElement>()\n  const prevRect = useRef<DOMRect>()\n\n  useLayoutEffect(() => {\n    if (!ref.current) {\n      return\n    }\n    const nextRect = ref.current.getBoundingClientRect()\n    if (!prevRect.current) {\n      prevRect.current = nextRect\n      return\n    }\n    const diff = prevRect.current.bottom - nextRect.bottom \n    prevRect.current = nextRect\n    if (diff === 0) {\n      return\n    }\n    ref.current.animate([\n      {\n        transform: `translate(0, ${diff}px)`,\n      },\n      { transform: 'translateX(0) translate(0, 0)' },\n    ], {\n        duration: Math.abs(1.8 * diff),\n        easing: 'ease-out',\n    })\n  })\n\n  return React.createElement(as, { ...other, ref }, children)\n}","import React from 'react';\nimport {\n  useTable,\n  useSortBy,\n  Column,\n} from 'react-table'\nimport { Motion } from '../motion/motion'\nimport './table.css'\n\nexport function Table<Row extends object>({ data, columns }: { data: Row[], columns: Column<Row>[] }) {\n  const table = useTable({\n    data,\n    columns,\n    initialState: { sortBy: [{ id: 'year' }] },\n  }, useSortBy)\n\n  return (\n    <table {...table.getTableProps()} className=\"table\">\n      <thead className=\"table_head\">\n        {table.headerGroups.map(headerGroup => (\n          <tr {...headerGroup.getHeaderGroupProps()} className=\"table_row_head\">\n            {headerGroup.headers.map(column => (\n              <th {...column.getHeaderProps(column.getSortByToggleProps())} className=\"table_cell_head\">\n                {column.render('Header')}\n                <span>\n                  {column.isSorted ? (column.isSortedDesc ? ' ðŸ”½' : ' ðŸ”¼') : ''}\n                </span>\n              </th>\n            ))}\n          </tr>\n        ))}\n      </thead>\n      <tbody {...table.getTableBodyProps()} className=\"table_body\">\n        {table.rows.map(row => {\n          table.prepareRow(row)\n          return (\n            <Motion as=\"tr\" {...row.getRowProps()} className=\"table_row\">\n              {row.cells.map(cell => (\n                <td {...cell.getCellProps()} className=\"table_cell\">\n                  {cell.render('Cell')}\n                </td>\n              ))}\n            </Motion>\n          )\n        })}\n      </tbody>\n    </table>\n  )\n}\n\nexport default Table;\n","import React, { useMemo } from 'react';\nimport { Column } from 'react-table'\nimport { Table } from '../table/table'\nimport './app.css';\n\ninterface Row {\n  year: number,\n  months: number[],\n  ytd: number,\n}\n\nfunction createData(): Row[] {\n  return new Array(12).fill(0).map((_, index) => {\n    const year = 2010 + index\n    const months = new Array(12).fill(0).map(() => Math.random() * 10)\n    const ytd = months.reduce((sum, month) => sum + month, 0)\n    return { year, months, ytd }\n  }) \n}\n\nfunction createColumns(): Column<Row>[] {\n  const columns: Column<Row>[] = [{\n    Header: 'Year',\n    accessor: 'year',\n  }]\n  new Array(12).fill(0).forEach((_, month) => {\n    const date = new Date()\n    date.setMonth(month)\n    \n    columns.push({\n      Header: date.toLocaleDateString('en-US', { month: 'short' }),\n      accessor: `months[${month}]` as 'months',\n      Cell: (props: { value: number }) => props.value.toFixed(2) + ' %'\n    })\n  })\n  columns.push({\n    Header: 'YTD',\n    accessor: 'ytd',\n    Cell: (props: { value: number }) => props.value.toFixed(2) + ' %',\n  })\n\n  return columns\n}\n\nexport function App() {\n  const data = useMemo(createData, [])\n  const columns = React.useMemo(createColumns, [])\n  \n  return (\n    <div className=\"page\">\n      <h1 className=\"page_header\">Monthly return</h1>\n      <Table data={data} columns={columns} />\n    </div>\n  )\n}","import { ReportHandler } from 'web-vitals';\n\nexport const reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './app/app';\nimport { reportWebVitals } from './report-web-vitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}